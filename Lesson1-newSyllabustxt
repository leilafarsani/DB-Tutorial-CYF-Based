What will we learn today?

Introduction to databases
Why do we need them?
Different types of database

Introduction to PostgreSQL
What is SQL?
What is a RDBMS?
What characterises a relational database?
Check your PostgreSQL installation

Communicating with the database using SQL
Retrieving data from an existing database
Use basic single table query commands in SQL
Choose which values are returned by a query
Use literals, expressions and functions in queries
Restricting the rows returned by a query to match some condition
Sorting and limiting the number of rows returned

Learning Objectives
By the end of this lesson students should be able to

Explain why databases are needed in Web Development
Define what SQL is and what it is used for
Describe what tables, rows and columns are used for in a relational database
Retrieve data from a table using PostgreSQL
Use expressions to manipulate the results of queries
Retrieve data from a table using conditionals in PostgreSQL
Insert new data into existing tables

Introduction to databases
A database is a structured set of data held in a computer. It provides ways to store, retrieve and organize information.

Why do we need them?
In the past few weeks, you stored and retrieved data using files. This is fine for simple data but it can quickly become an issue as your application becomes more complex and needs to store and manipulate more complicated data. For example, imagine you are asked to develop a booking system for a medium-sized hotel. You will need to store the list of rooms available for booking, and as you add more features, you will need to save users information, the reviews they post, the bookings each user makes and payment information. You can see that the data you need to handle can become very complicated, especially when you need to consider that data are not static, as they can be updated or deleted. To work more effectively with data, we can then use a database, which presents the following benefits:

A database defines a structure for your data and the relationships between entities
A database provides convenient and performant ways to safely store and retrieve data
A database provides a mechanism to check the validity of your data

Different types of database
There are many different kinds of database and different implementations. Sometimes, a database type is a better fit to certain use case or certain problems. The most well-known database types include relational database, key/value database, graph database and document database (also known as NoSQL). For this class, we will focus specifically on relational database as they are the most widely used and supported. You can consult DB-Engines to see a ranking of the most used database, as you can see, there are a lot of them!

Introduction to PostgreSQL
"PostgreSQL is a powerful, open source object-relational database system that uses and extends the SQL language combined with many features that safely store and scale the most complicated data workloads. The origins of PostgreSQL date back to 1986 as part of the POSTGRES project at the University of California at Berkeley and has more than 30 years of active development on the core platform." (source: postgresql.org)

What is SQL?
Pronounced S-Q-L or sequel
Stands for Structured Query Language
SQL is the standard language used to communicate with relational database
SQL statements are used to query, create, update, delete records in a database as well as many other tasks
SQL statements are executed by a RDBMS.
What is an RDBMS?
Stands for Relational Database Management System
It is a program that processes SQL statements to manage a relational database
PostgreSQL is an RDBMS.
What characterizes a relational database?
As mentioned previously, a relational database is a specific type of database. Data is stored in tables (relations) of rows (tuples) and columns (attributes) as per the example below: (img1)

Communicating with the database using SQL
We use SQL to perform actions on the database and initially we can use a terminal-like utility to do this. The utility is named psql and is run using the command:

psql <dbname> <username>

The command prompt from psql is the database name currently connected:
cyf_hotel=>

In psql, you can use the command help to show the help menu. Within the command prompt, you can enter SQL statements and run them against PostgreSQL. To quit psql, enter the command \q.

Download the following file to a directory on your computer. This file creates the sample data you can use for the following sections. To do this, click the file to open it in a github formatted page, then right click the Raw button in the bar just above the code and select Save As (or Save Link As or similar) to save it:

build-hotel.sql
Once you have the file downloaded to a known directory, execute the file build-hotel.sql from psql as shown below (replace /your/sql/path/ with the path to the download directory used above):
\include /your/sql/path/build-hotel.sql

Check that you have built all the required tables:
\dt

You should see a listing of your tables as follows (with your own username as owner):
            List of relations
    Schema |     Name      | Type  | Owner
    --------+---------------+-------+-------
    public | customers     | table | keith
    public | invoices      | table | keith
    public | reservations  | table | keith
    public | room_types    | table | keith
    public | rooms         | table | keith
    (5 rows)

    Here is the table diagram of the hotel database:
    (img4)

The SELECT Statement
We are first going to look at retrieving data from the database so we can examine it and later, use it in our applications.

To get data out of a table you use the SELECT statement (or command):
SELECT ... FROM ...;

For example:
SELECT name, phone, country FROM customers;

SQL commands entered in the psql command line tool are terminated with a semicolon (;). The SQL command can extend across several lines, but each keyword, name or value cannot be split over more than one line. For example:

SELECT name,
       phone,
       country
  FROM
       customers;

is the same as the previous example.

You can use SELECT * FROM ... to return all the columns of the table. For example:

SELECT * FROM rooms;

This is also a useful command to see what columns exist in a table. You can also use the \d <table_name> psql command to describe the table.

Note that the use of UPPER/lower case is only to emphasise and differentiate the SQL keywords (upper case) from the other names (lower case) e.g. column and table names. SQL keywords are not case-sensitive.

Scrolling the Results
When you issue a SELECT that returns a lot of data psql displays it one screenful at a time. To get the next screenful just press the Space key. You can also use the Up and Down arrow keys for line-by-line control and you can go back one screen with the 'B' key.

When you have finished reading the output use the 'Q' key to quit the display manager.

    Space       Next screenful
    'B'         Previous screenful
    Down Arrow  Next line
    Up Arrow    Previous line
    'Q'         Quit back to prompt


Exercise 1
List the name, phone and email of all customers
SELECT name, phone, email FROM customers;

List all the details of rooms
SELECT * FROM rooms;


List the customer id, checkin date and number of guests from reservations
SELECT customer_id, checkin_date, num_guests FROM reservations;

Some Useful psql Commands
The psql commands are not SQL and are specific to PostgreSQL (although most other RDBMS's have commands to perform similar jobs). These commands let you display information, execute system commands, etc. Use \? to display a summary of all the psql commands.

Display a list of available tables in the database:
\dt

Display the definition of a table:
\d <table name>

Display help for SQL commands:
\h [command]

Display a summary of the psql (backslash) commands:
\?

Exit (quit) from psql:
\q

Note that psql commands ARE case sensitive, unlike SQL commands.

Exercise 2
Display the definition of the customers table
\d customers


Display the help for the SELECT command (Note: we will not be covering ALL of this syntax!)
\h SELECT

Read the psql command help and find out what \dS does then try it

                 List of relations
 Schema |        Name         |   Type   |  Owner  
--------+---------------------+----------+---------
 public | customers_id_seq    | sequence | student
 public | invoices_id_seq     | sequence | student
 public | reservations_id_seq | sequence | student
 The command \dS in psql is used to display information about all sequences in the current database.


Displaying More Than Just Columns
You can use expressions in SQL:

SELECT room_no, rate * 0.85 FROM rooms;
+---------+-------------+
| room_no | rate * 0.85 |
+---------+-------------+
|     101 |     72.2500 |
|     102 |     72.2500 |
|     103 |     72.2500 |
  ...

Use a column alias to give the expression a meaningful name:
SELECT room_no,
       rate * 0.85 AS discounted_rate
    FROM rooms;
+---------+-----------------+
| room_no | discounted_rate |
+---------+-----------------+
|     101 |         72.2500 |
|     102 |         72.2500 |
|     103 |         72.2500 |

Here, the query uses the alias as the column heading. Aliases can also be used in other contexts - more on this later...

Note:
The command above doesn't add a column to the table. It just applies to the query result.
In PostgreSQL, a column alias is a way to rename a column in a result set of a query using the AS keyword.

SELECT first_name AS "First Name", last_name AS "Last Name", email AS "Email"
FROM customers;

In this example, we are selecting the "first_name", "last_name", and "email" columns from the "customers" table. However, we are also using the AS keyword to provide aliases for these columns.

The result set of this query will have three columns with the aliases "First Name", "Last Name", and "Email", respectively.

Column aliases can be useful in situations where the original column name is long, ambiguous, or difficult to read, or when you want to combine columns or perform calculations in a way that requires a new column name.

It's important to note that column aliases only apply to the result set of the query and do not change the underlying column name in the table.




