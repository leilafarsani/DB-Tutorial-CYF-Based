Database 1 - Introduction to SQL

What will we learn today?​

Introduction to databases
Why do we need them?
Different types of database
Introduction to PostgreSQL
What is SQL?
What is a RDBMS?
What characterises a relational database?
Database modeling exercise
Check your PostgreSQL installation
Communicating with the database using SQL
Creating a new database
Creating a table
Inserting data
Retrieving data
Retrieving data with conditions

Learning Objectives​

By the end of this lesson trainees should be able to

Explain why databases are needed in Web Development
Define what SQL is and what it is used for
Describe what table, rows and columns are used for in a relational database
Install and create a database using PostgreSQL
Create a table in a database using PostgreSQL
Insert data into a table using PostgreSQL
Retrieve data from a table using PostgreSQL
Retrieve data from a table using conditionals in PostgreSQL
List the different kinds of data that can be held in a PostgreSQL database

Introduction to databases​

A database is a structured set of data held in a computer. It provides ways to store, 
retrieve and organize information.

Why do we need them?​

In the past few weeks, you stored and retrieved data using files.
This is fine for simple data but it can quickly become an issue
as your application becomes more complex and needs to store and
manipulate more complicated data. For example, imagine you want
to develop the next biggest hotel booking application. You will
need to store the list of hotels available for booking somewhere,
and as you add more features, you will need to save users information, 
the reviews they post for each hotel, but also the bookings each user makes. 
You can see that the data you need to handle can become very complicated,
especially when you need to consider that data are not static, as they
can be updated or deleted. To work more effectively with data, we can
then use a database, which present the following benefits:

A database defines a structure for your data and the relationships between entities
A database provides convenient and performant ways to safely store and retrieve data
A database provides a mechanism to check the validity of your data

Different types of database
There are many different kinds of database and different implementations. 
Sometimes, a database type is a better fit to certain use case or certain problems.
The most well-known database types include relational database, key/value database,
graph database and document database (also known as NoSQL). For this class, we will
focus specifically on relational database as they are the most widely used and supported. 
You can consult DB-Engines to see a ranking of the most used database,
as you can see, there is a lot of them!

Introduction to PostgreSQL
"PostgreSQL is a powerful, open source object-relational database system that uses and
extends the SQL language combined with many features that safely store and scale the most
complicated data workloads. The origins of PostgreSQL date back to 1986 as part of the
POSTGRES project at the University of California at Berkeley and has more than 30 years
of active development on the core platform." (source: postgresql.org)

What is SQL?
Pronounced S-Q-L or sequel
Stands for Structured Query Language
SQL is the standard language used to communicate with relational database
SQL statements are used to query, create, update, delete records in a database
SQL statements are executed by a RDBMS.

What is a RDBMS?
Stands for Relational Database Management System
It is a program that processes SQL statements to manage a relational database
PostgreSQL is a RDBMS.

What characterizes a relational database?
As mentioned previously, a relational database is a specific type of 
database. Data is stored in tables of rows and columns as per the example below:
(img1)
How about storing everything in one big table as shown below? Why isn't it a good idea?

A customer could have several bookings. If the customer changes their telephone number,
you would have to update every single rows for this customer with their new number, 
which is more prone to errors. As a general rule, try to avoid duplication of data,
and instead design your system in a way that you have a single source of truth for
each piece of data. The example below is NOT a good solution.
(img2)